(defun test-data ()
  (data
   :name 'test
   :columns '($number1 symbol $number2 stuff)
   :egs '((0 TRUE 0 true)
          (0 False 0 true)
          (0 true 0 false)
          (0 false 0 false)
          (1 true 1 true)
          (1 false 1 false)
          (1 true 1 false)
          (1 false 1 true))))

(defun ekrem-c ()
  (let ((tbl (xindex (test-data)))
        (rows '())
        (art-medians '()))
    (dolist (row (table-all tbl))
      (push (eg-features row) rows))
    (dolist (row rows)
      (let ((best-node (nth (close-node row (cdr rows) (table-columns tbl)) rows)))
       ;(push (make-median row best-node columns) art-medians)
        (format t "~a~%~%" best-node)
        (delete best-node rows)
        (delete row rows)))))

(defun make-median (node1 node2 columns)
  (let ((new-node '())
        (n 0))
    ()))

   
(defun close-node (row egs columns)
  (let ((n 0)
        (distance 10000)
        (best-node 0))
    (dolist (eg egs best-node)
      (when (< (euc-distance eg row columns) distance)
          (setf distance (euc-distance eg row columns))
          (setf best-node n))
      (incf n))))
            
(defun euc-distance (node1 node2 columns)
  (let ((n 0)
        (distance 0))
    (dolist (col columns)
      (if (numericp (header-name col))
          (progn
            (if (numberp (nth n node1))
                (progn
                  (if (numberp (nth n node2))
                      (incf distance (square (- (nth n node1) (nth n node2))))
                      (incf distance (square (nth n node1)))))
                (if (numberp (nth n node2))
                    (incf distance (square (nth n node2)))))))
      (progn
        (if (samep (nth n node1) (nth n node2))
            '(nothing)
            (incf distance)))
      (incf n))
    (sqrt distance)))

(defun test-data()
  (data
   :name 'test
   :columns '($number1 symbol $number2 stuff)
   :egs '((0 bye 1 true)
          (.2 hey 1 true)
          (.5 hey 1 true)
          (1 hey 1 false)
          (1 bye 1 false)
          (.7 hey 1 false)
          (.3 bye 1 true)
          (0 bye 1 false)
          )))

(defun kmeans (k)
  (let* ((tbl (xindex (test-data)))
         (centroid-list (kmeans-find-centroid k (f tbl)))
         (centroid0 '())
         (n 0))
    (dolist (i centroid-list)
      (push (nth i (table-all tbl)) centroid0))
    (dolist (row (table-all tbl))
      (if (member n centroid-list)
          '(centroid)
          (kmeans-distance centroid0 row (table-columns tbl)))
      (setf n (+ n 1)))))


(defun kmeans-find-centroid (k length)
  (let ((centroid-list '()))
    (if (<= k length)
        (progn
          (dotimes (n k)
            (let ((number (random length)))
              (if (member number centroid-list)
                  (setf n (- n 1))
                  (push number centroid-list))))
          (sort centroid-list #'<)))))

(defun kmeans-move-centroid ())

(defun kmeans-distance (centroids row columns)
  (let ((n 0)
        (i 0)
        (closenode 0)
        (distance1 0)
        (distance2 0))
    (dolist (centroid centroids closenode)
      (dolist (datan (eg-features row))
        (if (numericp (header-name (nth n columns)))
            (setf distance1 (+ distance1 (- (* datan datan) (* (nth n (eg-features centroid)) (nth n (eg-features centroid))))))
            (progn
              (if (samep datan (nth n (eg-features centroid)))
                  '(nothing)
                  (setf distance1 (+ distance1 1)))))
        (setf n (+ n 1)))
      (if (= i 0)
          (progn
            (setf distance2 distance1)
            (setf closenode 0)
            (setf i 1))
          (progn
            (if (< distance1 distance2)
                (progn
                  (setf closenode i)
                  (setf i (+ i 1))
                  (setf distance2 distance1)))))
      (setf n 0))))

(defun ucube (tbl &optional c1 c1mom c2 c2mom c3 c3mom)
  (let ((new-tbl (normalize tbl))
        (n 0)
        (axes-cols '()))
    (if (samep c1 nil)
        (progn
          (dolist (col (table-columns new-tbl))
            (when (and (< n 3) (numericp (header-name col)))
              (push `(,(header-name col) max) axes-cols)
              (incf n))))
        (progn
          (let ((col-names nil))
            (dolist (col (table-columns new-tbl))
              (push (header-name col) col-names))
            (if (member c1 col-names)
                (if (or (samep c1mom nil) (not (or (samep c1mom 'max) (samep c1mom 'min))))
                    (progn
                      (push `(,c1 max) axes-cols)
                      (incf n))
                    (progn
                      (push `(,c1 ,c1mom) axes-cols)
                      (incf n))))
            (if (not (samep c2 nil))
                (if (member c2 col-names)
                    (if (or (samep c2mom nil) (not (or (samep c2mom 'max) (samep c2mom 'min))))
                        (progn
                          (push `(,c2 max) axes-cols)
                          (incf n))
                        (progn
                          (push `(,c2 ,c2mom) axes-cols)
                          (incf n)))))
            (if (not (samep c3 nil))
                (if (member c3 col-names)
                    (if (or (samep c3mom nil) (not (or (samep c3mom 'max) (samep c3mom 'min))))
                        (progn
                          (push `(,c3 max) axes-cols)
                          (incf n))
                        (progn
                          (push `(,c3 ,c3mom) axes-cols)
                          (incf n)))))
            (when (< n 3)
              (setf col-names (reverse col-names))
              (dolist (col col-names)
                (when (and (< n 3) (not (member col axes-cols)) (numericp (header-name col)))
                  (push `(,col max) axes-cols)
                  (incf n)))))))
    (dotimes (i n)
      (when (samep (second (nth i axes-cols)) 'min)
        (let ((x 0)
              (done nil))
          (dolist (col (table-columns new-tbl))
            (if (or done (samep (first (nth i axes-cols)) (header-name col)))
                (setf done t)
                (incf x)))
          (dolist (row (table-all new-tbl))
            (setf (nth x (eg-features row)) (+ (* (nth x (eg-features row)) -1) 1))))))
    (let ((distance-list nil))
      (dolist (row (table-all new-tbl))
        (let ((distance 0))
          (dotimes (i n)
            (let ((x 0)
                  (done nil))
              (dolist (col (table-columns new-tbl))
                (if (or done (samep (first (nth i axes-cols)) (header-name col)))
                    (setf done t)
                    (incf x)))
              (incf distance (nth x (eg-features row)))))
          (push distance distance-list)))
      (setf distance-list (reverse distance-list))
      (let* ((sorted-list (qsort distance-list))
             (worst (floor (* .8 (length sorted-list))))
             (worst-list nil))
        (dotimes (i worst)
          (push (nth i sorted-list) worst-list))
        (let ((current-nth 0))
          (dolist (distance-row distance-list)
            (if (member distance-row worst-list)
                'worst;SET THE MAIN TABLE's CLASS IN THIS ROW TO WORST
                'best);SET THE MAIN TABLE's CLASS IN THIS ROW TO BEST
                (incf current-nth))))))
  ;SET THE CLASS TO DISCRETE IF IT WAS NUMERIC
  ;INDEX THE TALBE
  )

(defun nb (train test &key (stream t))
  (let* ((acc 0)
	(all  (table-all test))
	(max  (length all)))
    (dolist (one all (/ acc max))
      (let* ((got     (bayes-classify2 (eg-features one) (xindex train)))
	     (want    (eg-class one))
	     (success (eql got want)))
	(incf acc (if success 1.0 0.0))
	(format stream "~a ~a ~a ~a~%"  got want  
		(round (* 100 (/ acc max)))
		(if success "   " "<--"))))))

(defun nb-simple (train test &key (stream t))
  (xindex train)
  (dolist (one (table-all test))
    (let* ((got     (bayes-classify (eg-features one) train))
	   (want    (eg-class one))
	   (success (eql got want)))
      (format stream "~a ~a ~a~%"  got want (if (eql got want) "   " "<--")))))

(defun bayes-classify (one tbl &optional (m 2) (k 1))
  (let* ((classes        (klasses tbl))
         (nclasses       (nklasses tbl))
         (n              (f        tbl))
	 (classi         (table-class tbl))
         (like           most-negative-fixnum)
         (classification (first classes)))
    (dolist (class classes)
      (let* ((prior (/ (f tbl class)
                        n))
             (tmp prior))
        (doitems (feature i one)
          (let ((small-sigma 0)
                (sum-of-frequency-for-feature-value 0))
            (dolist (class classes)
              (if (> (f tbl class i feature) 0)
                  (incf small-sigma))
              (incf sum-of-frequency-for-feature-value (expt (f tbl class i feature) 2))
              )
            (setf sum-of-frequency-for-feature-value (sqrt sum-of-frequency-for-feature-value))
            (unless (= classi i)
              (unless (unknownp feature)
                (let* ((dij  (/ (* (log (+ (f tbl class i feature) 1)) (log (/ (length classes) small-sigma))) sum-of-frequency-for-feature-value))
                       ())
                  (setf tmp (* tmp delta)))))))
        (when (> tmp like)
          (setf like tmp
                classification class))))
    classification))

(defun bayes-classify2 (one tbl)
  (let* ((classes        (klasses tbl))
         (nclasses       (nklasses tbl))
         (n              (f        tbl))
	 (classi         (table-class tbl))
         (like           most-negative-fixnum)
         (classification (first classes)))
    (dolist (class classes)
      (let* ((tmp   0))
        (doitems (feature i one)
          (unless (= classi i)
            (unless (unknownp feature)
              (let ((delta (weight-norm tbl feature i class classes)))
                (incf tmp delta)
                ;(format t "~%Bayes Classify ~a ~a ~a ~a" i feature class delta)
                ))))
        ;(print class)
        ;(print tmp)
        (when (> tmp like)
          (setf like tmp
                classification class))))
    classification))

(defun IDF-transform (tbl attr-val attribute class)
  (let* ((origcount (f tbl class attribute attr-val))
         (tf-transform (log (+ origcount 1)))
         (nclasses (nklasses tbl))
         (idf-transform (* tf-transform (log (/ nclasses (small-sigma tbl attr-val attribute)))))
         )
    idf-transform
    )
  )

(defun small-sigma (tbl attr-val attribute)
  (let ((result 0))
    (dolist (class (klasses tbl))
      (if (> (f tbl class attribute attr-val) 0)
          (incf result)
          )
      )
    result
    )
  )

(defun unique-attr-vals (tbl attribute)
  (discrete-uniques (nth attribute (table-columns tbl)))
  )

(defun length-norm (tbl attr-val attribute class)
  (let ((sum-of-squares 0))
    (dolist (current-attr-val (unique-attr-vals tbl attribute))
      (incf sum-of-squares (expt (IDF-transform tbl current-attr-val attribute class) 2))
      )
    (/ (IDF-transform tbl attr-val attribute class) (sqrt sum-of-squares))
    )
  )


(defun sum-across-class-ln (tbl attr-val attribute class)
  (let ((sum-of 0))
    (dolist (current-attr-val (unique-attr-vals tbl attribute))
      (incf sum-of (length-norm tbl current-attr-val attribute class))
      )
    sum-of
    )
  )




(defun complement2 (tbl attr-val attribute class classes)
  (let ((denominator 1)
        (numerator 1))
  (dolist (current-class classes)
    (if (not (equalp current-class class))
        (progn
          (incf numerator (length-norm tbl attr-val attribute current-class))
          (incf denominator (sum-across-class-ln tbl attr-val attribute current-class))
          )
        )
    )
  ;(format t "~%complement 2: ~a" (/ numerator denominator))
  (/ numerator denominator)
  )
  )

(defun weight (tbl attr-val attribute class classes)
  (log (complement2 tbl attr-val attribute class classes))
  )
    
(defun sum-across-class-ln-weighted (tbl attr-val attribute class classes)
  (let ((sum-of 0))
    (dolist (current-attr-val (unique-attr-vals tbl attribute))
      (incf sum-of (weight tbl current-attr-val attribute class classes))
      )
    sum-of
    )
  )

(defun weight-norm (tbl attr-val attribute class classes)
  (/
   (weight tbl attr-val attribute class classes)
   (sum-across-class-ln-weighted tbl attr-val attribute class classes)
   )
  )


(defun stress-test-nb (&optional (repeats 10000))
  (with-output-to-string (str)
    (dotimes (i repeats t)
      (random-test-nb1 0.2 str)))
  t)

  (defun make-weather (eg)
    (data :name    'weather 
	  :columns '(forecast temp humidity windy play)  
	  :egs      eg))
  
(let 
    ((egs     '((sunny    hot  high   FALSE skip) 
		(sunny    hot  high   TRUE  skip)
		(rainy    cool normal TRUE  skip)     
		(sunny    mild high   FALSE skip)
		(overcast cool normal TRUE  play)
		(overcast hot  high   FALSE play)
		(rainy    mild high   FALSE play)
		(rainy    cool normal FALSE play)
		(sunny    cool normal FALSE play)
		(rainy    mild normal FALSE play)
		(rainy    mild high   TRUE  skip)
		(sunny    mild normal TRUE  play)
		(overcast mild high   TRUE  play)
		(overcast hot  normal FALSE play))))
  
  (defun random-test-nb1 (&optional (n 0.3) (str t))
    (let* (train 
	   test
	   (k         (* n (length egs))))
      (dolist (eg (shuffle egs))
	(if (> (decf k) 0)
	    (push eg test)
	    (push eg train)))
      (nb (make-weather train)
	  (make-weather test)
	  :stream str)))
  
  (defun self-test-nb ()
    (nb (make-weather egs) 
	(make-weather egs)))
 
  (defun self-simple-test-nb ()
    (nb-simple  (make-weather egs) 
		(make-weather egs)))

 )

(defun self-test-custom (dataset)
  (nb dataset dataset))

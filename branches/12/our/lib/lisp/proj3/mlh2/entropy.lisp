(defun entropy (table)
  (let* ((classes (klasses table))
         (entropy 0 ))
    (dolist (cls classes entropy)
      (let ((occurences (/ (f table cls) (f table))))
      (incf entropy (- (* occurences (log occurences 2))))))))  

(defun gain (table attr)
  (let* ((values (discrete-uniques (nth attr (table-columns table))))
         (entropy-set (entropy table))
         (entropy-attr 0))
    (dolist (val values)
      (incf entropy-attr (entropy-att-val table attr val)))
  (- entropy-set entropy-attr)))
   
(defun entropy-att-val (table attr val)
  (let* ((classes (klasses table))
         (total-freq-tbl (f table))
         (total-freq 0)
         (entropy 0)
         (entr-val-at (list val)))
    (dolist (cls1 classes)
      (incf total-freq (f table cls1 attr val)))
    ;(format t "~A~%" total-freq)
    (dolist (cls classes)
      (let ((occurences (/ (f table cls attr val) total-freq)))
        (if (= occurences 0)
            (incf entropy 0)
            (incf entropy (-(* occurences (log occurences 2)))))))
    (* (float (/ total-freq total-freq-tbl)) entropy)))

(defun extract-best-cols (attranks n)
  (let ((used)
	(orig)
	(keepcols)
	(current 0))
    (setf orig (copy-list attranks)) 
    (setf attranks (sort attranks #'>)) 
    (dolist (sortedrank attranks)
      (setf current 0)
      (dolist (rank orig)
	(if (and (equal sortedrank rank)
		 (not (contains used rank)))		
	    (progn ()
		   ;(format t "~a " current)
		   (setf used (append used (list rank)))
		   (setf keepcols (append keepcols (list current)))))
	(incf current))
      (if (> (length keepcols) (- n 1)) (return-from extract-best-cols (sort keepcols #'<))))))
	


(defun prune-cols (colnums data)
  (let ((pruned)
	(tmp))
    (dolist (row data pruned)
      (setf tmp '())
      (dolist (col colnums)
	(setf tmp (append tmp (list (nth col row)))))
      (setf pruned (append pruned (list tmp))))))


(defun rank-via-infogain (dataset &optional (n (/ (length (car dataset)) 2)))
  (let ((result))
    (setf result (prune-cols (extract-best-cols (infogain dataset) n) dataset))
    result))

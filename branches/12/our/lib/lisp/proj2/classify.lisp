(defun classify-knn (d1 d2 k &optional (n (length (car d2))))
  (let ((score 0))
    (dolist (i d1 (float (/ score (length d2))))
      (let* ((lst (k-nearest i d2 k))
             (len (list (length (car lst))))
             (want (find-classes i len))
             (got (find-classes lst len)))
        (if (listp want)
            (setf want (car want)))
        (if (listp got)
            (setf got (car got)))
        (if (equal want got)
            (incf score))))))

(defun make-knn-data (tr te &optional (k 10))
  (let ((result)
        (train (table-egs-to-lists tr))
        (test (table-egs-to-lists te))
        (out))
    (dolist (testinst test)
      (setf result (append result (k-nearest testinst train k))))
    (setf result (remove-duplicates result :test #'equal))
    (xindex (setf out (make-simple-table 'knn-data (table-columns tr) result)))))



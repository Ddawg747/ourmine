(defmethod header-deep-copy ((column discrete))
  (let ((new-column (make-discrete)))
    (setf (discrete-name new-column) (discrete-name column))
    (setf (discrete-classp new-column) (discrete-classp column))
    (setf (discrete-ignorep new-column) (discrete-ignorep column))
    (setf (discrete-uniques new-column) (copy-list (discrete-uniques column)))
    new-column))
  
(defmethod header-deep-copy ((column numeric))
  (let ((new-column (make-numeric)))
    (setf (numeric-name new-column) (numeric-name column))
    (setf (numeric-classp new-column) (numeric-classp column))
    (setf (numeric-ignorep new-column) (numeric-ignorep column))
    new-column))

(defun eg-deep-copy (eg)
  (let ((new-eg (make-eg)))
    (setf (eg-features new-eg) (copy-list (eg-features eg)))
    (setf (eg-class new-eg) (eg-class eg))
    new-eg))

(defun table-deep-copy (tbl)
  (let ((new-tbl (make-table)))
    (setf (table-name new-tbl) (table-name tbl))
    (dolist (column (table-columns tbl))
      (push (header-deep-copy column) (table-columns new-tbl)))
    (setf (table-columns new-tbl) (nreverse (table-columns new-tbl)))
    (setf (table-class new-tbl) (table-class tbl))
    (dolist (eg (table-all tbl))
      (push (eg-deep-copy eg) (table-all new-tbl)))
    (setf (table-all new-tbl) (nreverse (table-all new-tbl)))
    (setf (table-indexed new-tbl) nil)
    new-tbl))


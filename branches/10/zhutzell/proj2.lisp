(defun numeric-preprocessor (tbl)
  (let ((classi (table-class tbl)))
    (dolist (eg (egs tbl))
      (doitems (feature i (eg-features eg))
        (let ((column-name (header-name (nth i (table-columns tbl)))))
          (unless (= classi i)
              (unless (unknownp feature)
                (if (numericp column-name)
                  (setf (nth i (eg-features eg)) (log (max 0.0001 feature)))))))))
    tbl))

(defun sub-sample (tbl)
  (multiple-value-bind (mclass mcount) (find-minority-class tbl)
    (dolist (klass (remove mclass (klasses tbl)))
      (do ((rows-removed 0)
           (classi (table-class tbl)))
          ((>= rows-removed (- (gethash (list klass klass) (header-f (table-class-header tbl))) mcount)))
          (let ((randomi (random (length (table-all tbl)))))
            (cond ((equalp klass (nth classi (eg-features (nth randomi (table-all tbl)))))
                    (setf (table-all tbl) (delete (nth randomi (table-all tbl)) (table-all tbl)))
                    (incf rows-removed))))))
    tbl))

(defun find-minority-class (tbl)
  (xindex tbl)
  (let ((minority-class nil)
        (minority-class-count most-positive-fixnum))
    (maphash #'(lambda (k v)
                (cond ((< v minority-class-count)
                      (setf minority-class k)
                      (setf minority-class-count v))))
             (header-f (table-class-header tbl)))
    (values (car minority-class) minority-class-count)))

(defun copy-file (from to)
  (with-open-file (in from :direction :input :element-type 'unsigned-byte)
    (with-open-file (out to :direction :output :element-type 'unsigned-byte)
      (do ((i (read-byte in nil -1)
              (read-byte in nil -1)))
          ((minusp i))
        (declare (fixnum i))
        (write-byte i out)))))

(deftest test-copyfile ()
(let ((exactCopy T))
    (copy-file "deftest/chapt14/inputfile.txt" "deftest/chapt14/outputfile.txt")
    (with-open-file (left "deftest/chapt14/inputfile.txt" :direction :input :element-type 'unsigned-byte)
      (with-open-file (right "deftest/chapt14/outputfile.txt" :direction :input :element-type 'unsigned-byte)
        (do ((compareOne (read-byte left nil -1)
                         (read-byte left nil -1))
             (compareTwo (read-byte right nil -1)
                         (read-byte right nil -1)))
            ((minusp compareOne))
          (declare (fixnum compareOne))
          (if (not (eql compareOne compareTwo))
              (setf exactCopy nil)))))
    (check exactCopy)
    (delete-file "deftest/chapt14/outputfile.txt")))
            

(defun get-distant-eg (tbl one)
  (let ((mostdistant one)
        (dist most-negative-fixnum))
    (dolist (eg (table-all tbl) mostdistant)
      (let ((tempdist (eg-distance (eg-features eg) (eg-features one))))
        (when (> tempdist dist)
          (setf mostdistant eg)
          (setf dist tempdist))))))

(defun get-distant-egs (tbl)
  (let ((eg-edge (get-distant-eg tbl (any (table-all tbl)))))
    (cons (get-distant-eg tbl eg-edge) (cons eg-edge nil))))

(defun get-max-heuristic-distance (tbl)
  (let ((distant-egs (get-distant-egs tbl)))
    (eg-distance (first distant-egs) (second distant-egs))))

(defun toss-out (tbl clusters &key (threshold .25))
  (let ((threshold-distance (* threshold (get-max-heuristic-distance tbl)))
        (toss-out-list))
    (dolist (eg (table-all tbl) tbl)
      (when (> (closest-cluster (eg-features eg) clusters)
               threshold-distance)
        (push eg toss-out-list)))
    (setf (table-all tbl)
          (remove-if (lambda (x)
                       (member x toss-out-list))
                     (table-all tbl)))))

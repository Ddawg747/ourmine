(flet ((normalsquare (normal value) (square (normalize normal value))))
  (defun calcw (record norms)
    (- 1 (/ (sqrt (apply #'+ (mapcar #'normalsquare norms record)))
            (sqrt (length norms))))))

(flet ((is-numeric? (val column)
         (if (typep column 'numeric) val nil)))
  (defun eg-numerics (eg cols)
    (remove nil (mapcar #'is-numeric? (eg-features eg) cols))))

(defun bore (dataset &key (percentile .20))
  (let ((normalvals))
    (doitems (columns i (table-columns dataset))
      (when (typep columns 'numeric)
        (push (fill-normal dataset i) normalvals)))
    (setf normalvals (reverse normalvals))
    (setf (table-all dataset)
          (sort (copy-list (table-all dataset)) #'>
                :key (lambda (record)
                       (calcw (eg-numerics record (table-columns dataset))
                              normalvals))))
    (best-of dataset percentile)))

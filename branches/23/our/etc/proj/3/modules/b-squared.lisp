(flet ((column-pick (ncol eg)
         (nth ncol (eg-features eg))))
  (defun make-frequency-table (ncol tbl &key (key #'column-pick))
    (let ((frequency-table (make-hash-table :test #'equal)))
      (dolist (eg (table-all tbl) frequency-table)
        (let ((value (format nil "~a" (funcall key ncol eg))))
          (if (null (gethash value frequency-table))
            (setf (gethash value frequency-table) 1)
            (incf (gethash value frequency-table)))))))
  (defun frequency-range (ncol tbl &key (key #'column-pick))
    (let ((classes (make-frequency-table ncol tbl :key key))
          (normalval (make-normal)))
      (maphash (lambda (k freq)
                 (declare (ignore k))
                 (add normalval freq))
               classes)
      (- (normal-max normalval) (normal-min normalval)))))

(defun frequency-score (ncol tbl)
  (/ (frequency-range ncol tbl) (length (table-all tbl))))

(defun score-frequency-utility (tbl)
  (let ((frequency-table (make-frequency-table nil tbl :key (lambda (ncol eg)
                                                              (declare (ignore ncol))
                                                              (eg-class eg)))))
    (dolist (each (table-all tbl) tbl)
      (setf (eg-class each) (gethash (eg-class each) frequency-table)))))

(defun b-squared (tbl &key (percentile .20) (threshold .25)
                      (score (lambda (b r) (/ (* b b) (+ b r)))))
  (setf (table-all tbl)
        (progn (unless (numberp (eg-class (first (table-all tbl))))
                 (score-frequency-utility tbl))
               (sort (table-all tbl) #'> :key (lambda (eg)
                                                (let ((val (eg-class eg)))
                                                  (if (null val) 0 val))))))
  (multiple-value-bind (tbl-best tbl-rest) (best-of tbl percentile)
    (let ((frequency-ranges))
      (doitems (column i (table-columns tbl))
               (let ((freq-best (frequency-score i tbl-best))
                     (freq-rest (frequency-score i tbl-rest)))
                 (push (list freq-best freq-rest column) frequency-ranges)))
      (setf frequency-ranges (sort (copy-list frequency-ranges) #'>
                                   :key (lambda (x)
                                          (if (or (= (second x) 0)
                                                  (< (first x) (second x)))
                                            0
                                            (funcall score (first x) (second x))))))
      (mapcar #'last (subseq frequency-ranges
                            0 (floor (* threshold
                                        (length frequency-ranges))))))))

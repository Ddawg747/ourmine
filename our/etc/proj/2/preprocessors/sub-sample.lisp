(defun sub-sample (data)
    (let* ((sorted-data (sort-table data))
           (all-instances (table-all sorted-data))
           (sampled-data)
           (curr)
           (least most-positive-fixnum) 
           (class-count 0)
           (prev (last (eg-features (nth 0 (table-all (xindex sorted-data)))))))
        (doitems (per-instance i all-instances)
            (setf curr (last (eg-features (nth i (table-all sorted-data)))))
            (if (equal prev curr) 
                (incf class-count)
                (progn 
                    (setf least (min class-count least))
                    (setf class-count 0)
                )
            )
            (setf prev curr)
        )
        (setf least (min class-count least))

        (incf least) ; reflects the smallest class size
        (doitems (per-instance i all-instances)
            (setf curr (last (eg-features (nth i (table-all sorted-data)))))
            (if (equal prev curr)
                (incf class-count)
                (setf class-count 1))
            (setf prev curr)
            (when (<= class-count least)
                (push per-instance sampled-data)
            )
        )
        sampled-data
    )
)

(defun minmax (lst) 
  (let ((start (reduce #'min lst))
	(end (reduce #'max lst))) 
    (mapcar #'(lambda (x) 
		(/ (- x start) (- end start))) 
	    lst)))

; puts data into 'bins' number of bins but the first and last are half size
(defun nbins1 (start end bins)
   (do (( x start (+ x 1)))
     ((> x end) 'Done)
     (format t "~A ~%" (round (* (/ (- x start)(- end start)) bins)))))

; correct version - all bins have the same width (whenever data allows)
(defun nbins (start end bins)
  (do (( x start (+ x 1)))
    ((> x end) 'Done)
    (format t "~A ~%" (floor (* (/ (- x start)(- end start)) bins)))))

(defun nbins2 (tbl n)
  (setf tbl (table-deep-copy tbl))
  (let ((maxs (make-array (length (table-columns tbl)) :initial-element 0))
        (mins (make-array (length (table-columns tbl)) :initial-element most-positive-fixnum)))
    (dolist (eg (egs tbl))
      (doitems (feature i (eg-features eg))
        (unless (unknownp feature)
          (if (numericp (header-name (nth i (table-columns tbl))))
            (setf (aref maxs i) (max feature (aref maxs i))
                  (aref mins i) (min feature (aref mins i)))))))
    (dolist (eg (egs tbl))
      (doitems (feature i (eg-features eg))
        (unless (unknownp feature)
          (if (numericp (header-name (nth i (table-columns tbl))))
            (setf (nth i (eg-features eg)) (min (1- n) (floor (* (/ (- feature (aref mins i)) (- (aref maxs i) (aref mins i))) n))))))))
    (doitems (column i (table-columns tbl))
      (if (numericp (header-name column))
        (setf (nth i (table-columns tbl)) (make-discrete :name (intern (subseq (symbol-name (header-name column)) 1)) 
                                    :classp (header-classp column) 
                                    :ignorep (header-ignorep column) 
                                    :uniques nil))))
    (dolist (eg (egs tbl))
      (doitems (feature i (eg-features eg))
        (if (not (member feature (discrete-uniques (nth i (table-columns tbl))) :test #'equalp))
          (push feature (discrete-uniques (nth i (table-columns tbl)))))))
     tbl))

(defun 10bins (tbl)
  (nbins2 tbl 10))


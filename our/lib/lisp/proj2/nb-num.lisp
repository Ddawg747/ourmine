(defun nb-num (train test &key (stream t))
  (let* ((acc 0)
	(all  (table-all test))
	(max  (length all)))
    (dolist (one all (/ acc max))
      (let* ((got     (bayes-classify-num (eg-features one) (xindex train)))
	     (want    (eg-class one))
	     (success (eql got want)))
	(incf acc (if success 1.0 0.0))
	(format stream "~a ~a ~a ~a~%"  got want  
		(round (* 100 (/ acc max)))
		(if success "   " "<--"))))))

(defun nb-simple-num (train test &key (stream t))
  (xindex train)
  (dolist (one (table-all test))
    (let* ((got     (bayes-classify-num (eg-features one) train))
	   (want    (eg-class one))
	   (success (eql got want)))
      (format stream "~a ~a ~a~%"  got want (if (eql got want) "   " "<--")))))

(defun bayes-classify-num (one tbl  &optional (m 2) (k 1))
  (let* ((classes        (klasses tbl))
         (nclasses       (nklasses tbl))
         (columns        (table-columns tbl))
         (n              (f        tbl))
	 (classi         (table-class tbl))
         (like           most-negative-fixnum)
         (temp2          0)
         (classification (first classes)))
    (dolist (class classes)
      (let* ((prior (/ (+ (f tbl class) k)
                       (+  n (* k nclasses))))
             (tmp (log prior)))
        (doitems (feature i one)
          (unless (= classi i)
            (unless (unknownp feature)
              (if (numericp (header-name (nth i columns)))
                    (let ((delta (pdf (gethash class (header-f (nth i columns))) feature)))
                      ;(format t "Feature ~A Class ~A Gaussian ~A~%"(header-name (nth i columns)) class delta)
                      (setf tmp (* tmp (log delta))))
                    (let ((delta (/ (+ (f tbl class i feature)
                                       (* m prior))
                                    (+ (f tbl class) m))))
                      ;(format t "Feature ~A Class ~A Freq ~A~%" (header-name (nth i columns)) class delta)
                      (setf tmp (* tmp (log delta))))))))
        (setf tmp (* tmp (/(f tbl class) n)))
        ;(format t "Likelihood of ~A ~A~%" class tmp)
        (when (> tmp like)
          (setf
           temp2 like
           like tmp
           classification class))))
    ;(format t "Prob: ~A%~% "  (round (* 100 (/ temp2 (+ like temp2)))))
    classification))

(defun stress-test-nb-num (&optional (repeats 10000))
  (with-output-to-string (str)
    (dotimes (i repeats t)
      (random-test-nb1 0.2 str)))
  t)

(defun make-weather-num ()
  (data :name    'weather 
        :columns '(forecast $temp $humidity windy play)  
        :egs   '((sunny    85  85    FALSE no) 
                 (sunny    80  90   TRUE  no)
                 (overcast 83  86 FALSE  yes)     
                 (rainy    70  96   FALSE yes)
                 (rainy    68  80 FALSE  yes)
                 (rainy    65  70   TRUE no)
                 (overcast 64  65   TRUE yes)
                 (sunny    72  95 FALSE no)
                 (sunny    69  70 FALSE yes)
                 (rainy    75  80 FALSE yes)
                 (sunny    75  70   TRUE  yes)
                 (overcast 72  90 TRUE  yes)
                 (overcast 81  75   FALSE  yes)
                 (rainy    71  91 TRUE no))))
  
  (defun random-test-nb1-num (&optional (n 0.3) (str t))
    (let* (train 
	   test
	   (k         (* n (length egs))))
      (dolist (eg (shuffle egs))
	(if (> (decf k) 0)
	    (push eg test)
	    (push eg train)))
      (nb (make-weather train)
	  (make-weather test)
	  :stream str)))
  
  (defun self-test-nb-num ()
    (nb (make-weather egs) 
	(make-weather egs)))
 
  (defun self-simple-test-nb-num ()
    (nb-simple  (make-weather egs) 
		(make-weather egs)))


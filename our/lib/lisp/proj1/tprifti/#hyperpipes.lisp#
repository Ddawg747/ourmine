(defun hp (train test &key (stream t))
  (let* ((acc 0)
	(all  (table-all test))
	(max  (length all)))
    (dolist (one all (/ acc max))
      (let* ((got     (hyperpipes (eg-features one) (xindex train)))
	     (want    (eg-class one))
	     (success (eql got want)))
	(incf acc (if success 1.0 0.0))
	(format stream "~a ~a ~a ~a~%"  got want  
		(round (* 100 (/ acc max)))
		(if success "   " "<--"))))))

(defun hp-simple (train test &key (stream t))
  (xindex train)
  (dolist (one (table-all test))
    (let* ((got     (bayes-classify (eg-features one) train))
	   (want    (eg-class one))
	   (success (eql got want)))
      (format stream "~a ~a ~a~%"  got want (if (eql got want) "   " "<--")))))

(defun hyperpipes (one tbl &optional (m 2) (k 1))
  (let* ((classes        (klasses tbl))
         (nclasses       (nklasses tbl))
         (n              (f        tbl))
	 (classi         (table-class tbl))
         (like           most-negative-fixnum)
         (classification (first classes)))
    (dolist (class classes)
      (let* ((prior (/ (+ (f tbl class) k)
                       (+  n (* k nclasses))))
             (tmp   0))
        (doitems (feature i one)
          (unless (= classi i)
            (unless (unknownp feature)
              ;(let ((delta (/ (+ (f tbl class i feature)
              ;                   (* m prior))
              ;                (+ (f tbl class) m))))
              ;;;;;this is what I changed
              (let ((delta (if (> (f tbl class i feature) 0) 1 0)))
                (incf tmp delta)))))
        (when (> tmp like)
          (setf like tmp
                classification class))))
    classification))

(defun stress-test-hp (&optional (repeats 10000))
  (with-output-to-string (str)
    (dotimes (i repeats t)
      (random-test-nb1 0.2 str)))
  t)

  (defun make-weather (eg)
    (data :name    'weather 
	  :columns '(forecast temp humidity windy play)  
	  :egs      eg))
  
(let 
    ((egs     '((sunny    hot  high   FALSE skip) 
		(sunny    hot  high   TRUE  skip)
		(rainy    cool normal TRUE  skip)     
		(sunny    mild high   FALSE skip)
		(overcast cool normal TRUE  play)
		(overcast hot  high   FALSE play)
		(rainy    mild high   FALSE play)
		(rainy    cool normal FALSE play)
		(sunny    cool normal FALSE play)
		(rainy    mild normal FALSE play)
		(rainy    mild high   TRUE  skip)
		(sunny    mild normal TRUE  play)
		(overcast mild high   TRUE  play)
		(overcast hot  normal FALSE play))))
  
  (defun random-test-hp1 (&optional (n 0.3) (str t))
    (let* (train 
	   test
	   (k         (* n (length egs))))
      (dolist (eg (shuffle egs))
	(if (> (decf k) 0)
	    (push eg test)
	    (push eg train)))
      (nb (make-weather train)
	  (make-weather test)
	  :stream str)))
  
  (defun self-test-hyperpipes ()
    (hp (vote) 
	(vote)))

  (defun self-test-hyperpipes1()
    (hp (group1bolts)
        (group1bolts)))
 
  (defun self-simple-test-hp ()
    (nb-simple  (make-weather egs) 
		(make-weather egs)))

 )


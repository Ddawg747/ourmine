(defun bsquare (tbl top &optional (bins 5))
  (let ((score (score-tbl-bsquare (xindex (utilscore tbl)) top bins)))
    (xindex (bsquare-table tbl score))))

(defun score-tbl-bsquare (tbl top  &optional (bins 5))
  (let* ((len (- (length (table-columns tbl)) 2))
         (lst-scores)
         (copy-for-sort))
    (dotimes (i len)
      (setf lst-scores (append lst-scores (list (list (score-all-bsquare tbl i bins) i)))))
    (setf copy-for-sort (copy-list lst-scores))
    (get-top-cols top (sort copy-for-sort #'> :key #'car))))
  
(defun get-top-cols (top lst)
  (let* ((top-cols))
    (dotimes (i top top-cols)
      (setf top-cols (append top-cols (list (car (cdr (nth i lst)))))))))
    

                          
(defun score-all-bsquare(tbl attr &optional (bins 5))
  (let* ((ranges (make-ranges (get-vals-attr tbl attr) bins))
         (lst-ranges (ranges-to-lists ranges))
         (best)
         (rest)
         (lst-score-rng)
         (med))
    (multiple-value-bind (b r) (split-table tbl 0.2)
      (setf best b)
      (setf rest r))
    (dolist (rng lst-ranges)
      (setf lst-score-rng (append lst-score-rng (list (score-bsquare best rest attr rng)))))
    (setf med (median2 lst-score-rng))))
                      
(defun score-bsquare (best rest attr range)
  (let* ((min (car range))
         (max (car (last range)))  
         (total-best (f best))
         (total-rest (f rest))
         (total (+ total-best total-rest))
         (freq-best (+ 0.000001 (calc-freq best attr min max)))
         (freq-rest (+ 0.000001 (calc-freq rest attr min max)))
         (b (* freq-best (float (/ total-best total))))
         (r (* freq-rest (float (/ total-rest total)))))
    (/ (* b b) (+ b r))))


(defun calc-freq (tbl attr min max)
  (let ((freq 0)
        (instances (get-features (table-all tbl)))
        (total-size (f tbl)))
    (dolist (inst instances)
       (let ((val (nth attr inst)))
        (if (and (<= val max) (>= val min))
            (incf freq))))
    (float (/ freq total-size))))

(defun get-vals-attr (tbl attndx)
  (let* ((listrows (table-egs-to-lists tbl))
         (tmpcol))
      (dolist (row listrows tmpcol)
	(setf tmpcol (append tmpcol (list (nth attndx row)))))))

(defun make-cons-ranges (lst)
  (let* ((lst-ranges '()))
    (if (null lst) lst-ranges
        (setf lst-ranges (append lst-ranges (list (cons (car lst) (car (cdr lst))))
                                (make-cons-ranges (cdr (cdr lst))))))
    lst-ranges))


(defun bsquare-table (table best-col-index)
  (let* ((cols)
         (best-cols (sort (copy-list best-col-index) #'<))
         (columns (table-columns table)))
    (dolist (indx best-cols)
      (setf cols (append cols (list (nth indx columns)))))
    (setf cols (append cols (list (nth (table-class table) columns))))
    (make-simple-table (table-name table) cols (prune-cols-bsquare best-cols table))))

(defun prune-cols-bsquare (colnums data)
  (let ((pruned)
        (cls (table-class data))
        (inst (table-egs-to-lists data))
	(tmp))
    (dolist (row inst pruned)
      (setf tmp '())
      (dolist (col colnums)
	(setf tmp (append tmp (list (nth col row)))))
      (setf tmp (append tmp (list (nth cls row))))
    (setf pruned (append pruned (list tmp))))))

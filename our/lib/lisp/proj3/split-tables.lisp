(defun b-squared-split (tbl &optional (bins 2) (splitpercent 0.20))
  (let* ((listrows (table-egs-to-lists tbl))
	 (datasize (length listrows))
	 (tmpcol))
    (dotimes (attndx (- (length (car listrows)) 1))
      (dolist (row listrows)
	(setf tmpcol (append tmpcol (list (nth attndx row)))))
      (make-ranges tmpcol bins) ;;<- tomi, you will need to call this function
      (setf tmpcol '()))))
    
(defun split-table (tbl splitpercent)
  (let* ((listrows (table-egs-to-lists tbl))
	 (cols (table-columns tbl))
	 (min1 0)
	 (max1 (ceiling (* (length listrows) splitpercent)))
	 (min2 (+ max1 1))
	 (max2 (- (length listrows) 1))
	 (best (rangecdr min1 max1 listrows))
	 (rest (rangecdr min2 max2 listrows)))
    (values (make-simple-table 'best cols best)
	    (make-simple-table 'rest cols rest))))
    
(defun rangecdr (min max lst)
  (let ((result))
    (dotimes (i (+ (- max min) 1) result)
      (setf result (append result (list (nth (+ i min) lst)))))))
      

(defun make-ranges (lst bins)
  (let* ((sorted (sort lst #'<))
	 (binsize (ceiling (/ (length sorted) bins)))
	 (ranges)
	 (indx 0))
    (dotimes (i (+ 1 binsize) ranges)	     		   	       
      (setf ranges (append ranges (list 
				   (list (nth indx sorted) 
					 (nth (- (+ indx binsize) 1) sorted)))))
      (incf indx binsize)
      (incf i (- binsize 2)))))
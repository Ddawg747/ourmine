(defun traintest-pdata()
  (let* ((data (set-data))
         (len (length data))
         (test '())
         (ndx)
         ;(temp)
         ;(class-col (table-class data))
         (test-size (floor (* len 0.10))))
    (dotimes (n test-size (list (xindex (append-tables test))  data))
      (setf ndx (random (length data)))
      (setf test (append test (list (nth ndx data))))
      (setf data (remove (nth ndx data) data)))))


(defun merge-all-datasets()
  (let* ((all)
         (shared (list (shared_pc1) (shared_kc1) (shared_kc2) (shared_kc3) (shared_cm1) (shared_mw1) (shared_mc2)))
         (turkish (list (ar3) (ar4) (ar5)))
         (shared-cols '(0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 16 17 18))
         (shared-cols (append shared-cols (list (table-class (car shared)))))
         (turkish-cols '(4 22 23 25 11 12 13 14 15 16 0 2 3 6 5 8 7 17))
         (turkish-cols (append turkish-cols (list (table-class (car turkish)))))
         (currdata))
    (dolist (dataset turkish)
      (setf currdata (eval dataset))
      (setf currdata (keep-cols currdata turkish-cols))
      (setf all (append (list currdata ) all)))
    (dolist (dataset shared)
      (setf currdata (eval dataset))
      (setf currdata (keep-cols dataset shared-cols))
      (setf all (append (list currdata) all)))
    all))


(defun common-shared (shared)
  (let* ((data (eval shared))
         (shared-cols '(0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 16 17 18))
         (shared-cols (append shared-cols (list (table-class data))))
         (newdata))
    (setf newdata (keep-cols data shared-cols))
    (make-simple-table (table-name data) (keep-columns data shared-cols) newdata)))

(defun common-turkish (turkish)
  (let* ((data (eval turkish))
         (turkish-cols '(4 22 23 25 11 12 13 14 15 16 0 2 3 6 5 8 7 17))
         (turkish-cols (append turkish-cols (list (table-class data))))
         (newdata))
    (setf newdata (keep-cols data turkish-cols))
    (make-simple-table (table-name data) (keep-columns data turkish-cols) newdata)))
      
(defun col-names (list shared)
  (let* ((count (length (table-columns shared)))
         (col-names))
    (dotimes (i count col-names)
      (if (and (eq i 1)(position i list))
          (setf col-names (append col-names (list 'loc)))
      (if (and (eq i 2)(position i list))
          (setf col-names (append col-names (list 'v)))
      (if (and (eq i 3)(position i list))
          (setf col-names (append col-names (list 'ev)))
      (if (and (eq i 4)(position i list))
          (setf col-names (append col-names (list 'iv)))
      (if (and (eq i 5)(position i list))
          (setf col-names (append col-names (list 'v)))
      (if (and (eq i 6)(position i list))
          (setf col-names (append col-names (list 'l)))
      (if (and (eq i 7)(position i list))
          (setf col-names (append col-names (list 'd)))
      (if (and (eq i 8)(position i list))
          (setf col-names (append col-names (list 'i)))
      (if (and (eq i 9)(position i list))
          (setf col-names (append col-names (list 'e)))
      (if (and (eq i 10)(position i list))
          (setf col-names (append col-names (list 'b)))
      (if (and (eq i 11)(position i list))
          (setf col-names (append col-names (list 't)))
      (if (and (eq i 12)(position i list))
          (setf col-names (append col-names (list 'lOCode)))
      (if (and (eq i 13)(position i list))
          (setf col-names (append col-names (list 'lOComment)))
      (if (and (eq i 14)(position i list))
          (setf col-names (append col-names (list 'locCodeAndComment)))
      (if (and (eq i 15)(position i list))
          (setf col-names (append col-names (list 'uniq_Op)))
      (if (and (eq i 16)(position i list))
          (setf col-names (append col-names (list 'uniq_Opnd)))
      (if (and (eq i 17)(position i list))
          (setf col-names (append col-names (list 'total_Op)))
      (if (and (eq i 18)(position i list))
          (setf col-names (append col-names (list 'total_Opnd)))
      (if (and (eq i 19)(position i list))
          (setf col-names (append col-names (list 'branchCount)))
       ))))))))))))))))))))))
                                                 
                                                 
